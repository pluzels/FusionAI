import json
import base64
import g4f

def generate_response(prompt, image_base64):
    try:
        # Panggil API g4f untuk mendapatkan response dengan vision model
        response = g4f.ChatCompletion.create(
            model='gpt-4o',
            provider=g4f.Provider.PollinationsAI,
            messages=[
                {"role": "system", "content": "You are a helpful assistant that can analyze images."},
                {"role": "user", "content": prompt},
                {"role": "user", "content": image_base64},  # Kirim gambar dalam format base64
            ]
        )
    except Exception as e:
        return {"response": f"Error: Exception saat memanggil g4f: {str(e)}"}

    print("Raw response:", response)  # Debug: Lihat apa yang dikembalikan

    try:
        # Coba parsing response
        if isinstance(response, str):
            try:
                parsed_response = json.loads(response)
            except json.JSONDecodeError:
                return {"response": response}  # Jika response bukan JSON, kembalikan langsung
        else:
            parsed_response = response

        # Validasi struktur response
        if isinstance(parsed_response, dict) and "choices" in parsed_response:
            choices = parsed_response["choices"]
            if isinstance(choices, list) and len(choices) > 0:
                first_choice = choices[0]
                if "message" in first_choice and "content" in first_choice["message"]:
                    return {"response": first_choice["message"]["content"]}
                else:
                    return {"response": "Error: Key 'message' atau 'content' tidak ditemukan di response"}
            else:
                return {"response": "Error: 'choices' kosong atau tidak berbentuk list"}
        else:
            return {"response": "Error: Format response tidak sesuai, tidak ada key 'choices'"}
    except Exception as e:
          return {"response": f"Error: Exception saat memproses response: {str(e)}"}
